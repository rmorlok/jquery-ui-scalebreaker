// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    return $.widget("salsita.scalebreaker", {
      options: {
        cssAnimated: true,
        dialogContent: '',
        idNamespace: 'jq-scalebreaker',
        dialogPosition: 'bottom',
        closeOnBackdrop: true,
        denyUserScroll: true,
        debug: false
      },
      _create: function() {
        this.rawElement = "<div id='" + this.options.idNamespace + "'>           <div id='" + this.options.idNamespace + "-dialog'>             <div id='" + this.options.idNamespace + "-dialog-content'></div>           </div>         </div>";
        this.backdrop = null;
        this.dialog = null;
        this.dialogContent = null;
        this.scaleFactor = null;
        this.fullPageHeight = null;
        this.currentViewportOffset = [];
        return this._initWidget();
      },
      _initWidget: function() {
        $('body').append(this.rawElement);
        this.backdrop = $('#' + this.options.idNamespace);
        this.dialog = $('#' + this.options.idNamespace + '-dialog');
        this.dialogContent = $('#' + this.options.idNamespace + '-dialog-content');
        this._logMessage('wrapper reference created', this.backdrop);
        this._setBackdropHeight();
        return this.addContentToDialog(this.options.dialogContent);
      },
      _logMessage: function(name, args) {
        if (this.options.debug) {
          return console.debug("" + this.options.idNamespace + ": " + name, args);
        }
      },
      _getScaleFactor: function() {
        this.scaleFactor = window.innerWidth / document.documentElement.clientWidth;
        this._logMessage('scale factor', this.scaleFactor);
        return this.scaleFactor;
      },
      _getCurrentViewportOffset: function() {
        this.currentViewportOffset = [window.pageXOffset, window.pageYOffset];
        this._logMessage('current viewport offset', this.currentViewportOffset);
        return this.currentViewportOffset;
      },
      _setBackdropHeight: function() {
        this.fullPageHeight = Math.max(document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
        return this.backdrop.css({
          'height': this.fullPageHeight
        });
      },
      addContentToDialog: function(content) {
        this.dialogContent.html(content);
        return this._logMessage('adding content to dialog', content);
      },
      rescaleAndReposition: function(el) {
        var newViewport, _self;
        _self = this;
        newViewport = this._getCurrentViewportOffset();
        if (this.options.dialogPosition === 'top') {
          el.css({
            'top': newViewport[1],
            'left': newViewport[0],
            'transform-origin': '0 0',
            '-webkit-transform-origin': '0 0'
          });
        }
        if (this.options.dialogPosition === 'bottom') {
          el.css({
            'bottom': _self.fullPageHeight - (newViewport[1] + window.innerHeight),
            'left': newViewport[0],
            'transform-origin': '0 100%',
            '-webkit-transform-origin': '0 100%'
          });
        }
        return el.css({
          'transform': "scale(" + (_self._getScaleFactor()) + ")",
          '-webkit-transform': "scale(" + (_self._getScaleFactor()) + ")"
        });
      },
      show: function() {
        var _self;
        _self = this;
        if (this.options.closeOnBackdrop) {
          _self.backdrop.on("click." + this.options.idNamespace, function(e) {
            if (e.target === _self.backdrop.get(0)) {
              return _self.hide();
            }
          });
        }
        if (this.options.denyUserScroll) {
          $('body').on("touchmove." + this.options.idNamespace, function(e) {
            return e.preventDefault();
          });
        }
        this.backdrop.addClass("" + this.options.idNamespace + "-show");
        this.rescaleAndReposition(this.dialog);
        if (this.options.cssAnimated) {
          this.backdrop.addClass("" + this.options.idNamespace + "-animate-in");
          this.backdrop.on('animationend webkitAnimationEnd', function(e) {
            if (e.target === _self.dialogContent.get(0)) {
              _self.backdrop.removeClass("" + _self.options.idNamespace + "-animate-in");
              return _self.backdrop.off('animationend webkitAnimationEnd');
            }
          });
        }
        return this._logMessage('showing widget');
      },
      hide: function() {
        var _self;
        _self = this;
        if (this.options.denyUserScroll) {
          $('body').off("touchmove." + this.options.idNamespace);
        }
        if (this.options.closeOnBackdrop && this.options.cssAnimated) {
          _self.backdrop.off("click." + this.options.idNamespace);
          this.backdrop.addClass("" + this.options.idNamespace + "-animate-out");
          this.backdrop.on('animationend webkitAnimationEnd', function(e) {
            if (e.target === _self.dialogContent.get(0)) {
              _self.backdrop.removeClass("" + _self.options.idNamespace + "-animate-out");
              _self.backdrop.removeClass("" + _self.options.idNamespace + "-show");
              _self.dialog.removeAttr('style');
              return _self.backdrop.off('animationend webkitAnimationEnd');
            }
          });
        } else if (this.options.closeOnBackdrop) {
          _self.backdrop.off("click." + this.options.idNamespace);
          this.backdrop.removeClass("" + this.options.idNamespace + "-show");
          this.dialog.removeAttr('style');
        }
        return this._logMessage('hiding widget');
      },
      destroy: function() {
        this.backdrop.remove();
        this.rawElement = null;
        this.backdrop = null;
        this.dialog = null;
        this.scaleFactor = null;
        this.initialViewport = null;
        this.currentViewportOffset = null;
        return this._destroy();
      },
      _destroy: $.noop
    });
  })(jQuery);

}).call(this);
